#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const http = require('http');
const https = require('https');
const fs = require('fs');
const mongoose = require('mongoose');
const db = require("../models");

require('dotenv').config();
if (!(process.env.SF_LOGIN_URL 
    && process.env.CLIENT_KEY 
    && process.env.CLIENT_SECRET 
    && process.env.OAUTH_CALLBACK_URI
    && process.env.DEFAULT_CATALOG_ID
    && process.env.DEFAULT_PAGE_SIZE_PRODUCTS_LIST
    && process.env.CONTEXT_DEFINITION_ID
    && process.env.CONTEXT_MAPPING_ID
    && process.env.PRICE_BOOK_ID
    && process.env.EPC_BASE_API
    )) {
  console.error('Cannot start app: missing mandatory configuration. Check your .env file.');
  process.exit(-1);
}

const isDev = process.env.NODE_ENV === 'development';
console.log(`running in development mode = ${isDev}`);
if (isDev) {
	process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';
}

const port = normalizePort(process.env.PORT || '3303');
app.set('port', port);

const credentials = isDev? 
  {
    key : fs.readFileSync('./server.key', 'utf8'), 
    cert: fs.readFileSync('./server.cert', 'utf8')
  } : null;

var server = isDev? https.createServer(credentials, app) : http.createServer(app);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  /*
    Initializing postgres
  */
  db.sequelize.sync().then(() => console.log('DB Ready'));
  
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
}
